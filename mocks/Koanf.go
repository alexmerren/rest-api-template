// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	koanf "github.com/knadh/koanf"
	mock "github.com/stretchr/testify/mock"
)

// Koanf is an autogenerated mock type for the Koanf type
type Koanf struct {
	mock.Mock
}

// Int provides a mock function with given fields: name
func (_m *Koanf) Int(name string) int {
	ret := _m.Called(name)

	var r0 int
	if rf, ok := ret.Get(0).(func(string) int); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Load provides a mock function with given fields: p, pa, opts
func (_m *Koanf) Load(p koanf.Provider, pa koanf.Parser, opts ...koanf.Option) error {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, p, pa)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(koanf.Provider, koanf.Parser, ...koanf.Option) error); ok {
		r0 = rf(p, pa, opts...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with given fields: name
func (_m *Koanf) String(name string) string {
	ret := _m.Called(name)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unmarshal provides a mock function with given fields: path, o
func (_m *Koanf) Unmarshal(path string, o interface{}) error {
	ret := _m.Called(path, o)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(path, o)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
