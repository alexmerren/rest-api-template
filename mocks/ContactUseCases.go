// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "rest-api-template/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ContactUseCases is an autogenerated mock type for the ContactUseCases type
type ContactUseCases struct {
	mock.Mock
}

// CreateContacts provides a mock function with given fields: ctx, contacts
func (_m *ContactUseCases) CreateContacts(ctx context.Context, contacts []*entities.Contact) error {
	ret := _m.Called(ctx, contacts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []*entities.Contact) error); ok {
		r0 = rf(ctx, contacts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteContactByID provides a mock function with given fields: ctx, ID
func (_m *ContactUseCases) DeleteContactByID(ctx context.Context, ID string) (*entities.Contact, error) {
	ret := _m.Called(ctx, ID)

	var r0 *entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Contact); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContactByID provides a mock function with given fields: ctx, ID
func (_m *ContactUseCases) GetContactByID(ctx context.Context, ID string) (*entities.Contact, error) {
	ret := _m.Called(ctx, ID)

	var r0 *entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *entities.Contact); ok {
		r0 = rf(ctx, ID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListContacts provides a mock function with given fields: ctx
func (_m *ContactUseCases) ListContacts(ctx context.Context) ([]*entities.Contact, error) {
	ret := _m.Called(ctx)

	var r0 []*entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context) []*entities.Contact); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateContactByID provides a mock function with given fields: ctx, ID, newContact
func (_m *ContactUseCases) UpdateContactByID(ctx context.Context, ID string, newContact *entities.Contact) (*entities.Contact, error) {
	ret := _m.Called(ctx, ID, newContact)

	var r0 *entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string, *entities.Contact) *entities.Contact); ok {
		r0 = rf(ctx, ID, newContact)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *entities.Contact) error); ok {
		r1 = rf(ctx, ID, newContact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContactUseCases creates a new instance of ContactUseCases. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewContactUseCases(t testing.TB) *ContactUseCases {
	mock := &ContactUseCases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
