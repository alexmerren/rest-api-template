// Code generated by mockery v2.11.0. DO NOT EDIT.

package mocks

import (
	context "context"
	entities "rest-api-template/internal/domain/entities"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// ContactStoreRepository is an autogenerated mock type for the ContactStoreRepository type
type ContactStoreRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, contact
func (_m *ContactStoreRepository) Create(ctx context.Context, contact entities.Contact) error {
	ret := _m.Called(ctx, contact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Contact) error); ok {
		r0 = rf(ctx, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *ContactStoreRepository) Delete(ctx context.Context, ID string) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadMany provides a mock function with given fields: ctx
func (_m *ContactStoreRepository) ReadMany(ctx context.Context) ([]entities.Contact, error) {
	ret := _m.Called(ctx)

	var r0 []entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Contact); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadOne provides a mock function with given fields: ctx, ID
func (_m *ContactStoreRepository) ReadOne(ctx context.Context, ID string) (entities.Contact, error) {
	ret := _m.Called(ctx, ID)

	var r0 entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Contact); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Get(0).(entities.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, ID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, ID, contact
func (_m *ContactStoreRepository) Update(ctx context.Context, ID string, contact entities.Contact) (entities.Contact, error) {
	ret := _m.Called(ctx, ID, contact)

	var r0 entities.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string, entities.Contact) entities.Contact); ok {
		r0 = rf(ctx, ID, contact)
	} else {
		r0 = ret.Get(0).(entities.Contact)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, entities.Contact) error); ok {
		r1 = rf(ctx, ID, contact)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewContactStoreRepository creates a new instance of ContactStoreRepository. It also registers a cleanup function to assert the mocks expectations.
func NewContactStoreRepository(t testing.TB) *ContactStoreRepository {
	mock := &ContactStoreRepository{}

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
