// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	datastore "golang-api-template/internal/datastore"

	mock "github.com/stretchr/testify/mock"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// DeleteContact provides a mock function with given fields: _a0, id
func (_m *Database) DeleteContact(_a0 context.Context, id string) error {
	ret := _m.Called(_a0, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(_a0, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllContacts provides a mock function with given fields: _a0
func (_m *Database) GetAllContacts(_a0 context.Context) ([]*datastore.Contact, error) {
	ret := _m.Called(_a0)

	var r0 []*datastore.Contact
	if rf, ok := ret.Get(0).(func(context.Context) []*datastore.Contact); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*datastore.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetContact provides a mock function with given fields: _a0, id
func (_m *Database) GetContact(_a0 context.Context, id string) (*datastore.Contact, error) {
	ret := _m.Called(_a0, id)

	var r0 *datastore.Contact
	if rf, ok := ret.Get(0).(func(context.Context, string) *datastore.Contact); ok {
		r0 = rf(_a0, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*datastore.Contact)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertContact provides a mock function with given fields: _a0, contact
func (_m *Database) InsertContact(_a0 context.Context, contact *datastore.Contact) error {
	ret := _m.Called(_a0, contact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Contact) error); ok {
		r0 = rf(_a0, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateContact provides a mock function with given fields: _a0, contact
func (_m *Database) UpdateContact(_a0 context.Context, contact *datastore.Contact) error {
	ret := _m.Called(_a0, contact)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *datastore.Contact) error); ok {
		r0 = rf(_a0, contact)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
